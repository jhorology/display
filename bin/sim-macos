#!/usr/bin/env node

const fs = require('node:fs/promises'),
  path = require('node:path'),
  math = require('mathjs'),
  IccMaxDOM = require('../lib/iccmax-dom'),
  { toS15F16UInt32, fromS15F16UInt32 } = require('../lib/fp'),
  { decode_ndin } = require('../lib/icc-private-tags'),
  { xyzChromaticity, chromaticAdapt, createChromaticAdaption } = require('../lib/display-icc'),
  test_files = ['aw3225qf_macos_icc.xml', 'aw3225qf_macos_icc.xml', 'mba_m2_lcd_macos_icc.xml'],
  r = (v) => fromS15F16UInt32(toS15F16UInt32(v)),
  BRADFORD_TRANSFORM = [
    [0.8951, 0.2664, -0.1614],
    [-0.7502, 1.7135, 0.0367],
    [0.0389, -0.0685, 1.0296]
  ]

function round(v) {
  fromS15F16UInt32(toS15F16UInt32(v))
}

async function display_p3() {
  const icc_xml_file = path.join(__dirname, '..', 'data', 'Display P3.xml'),
    icc = await IccMaxDOM.fromXmlFile(icc_xml_file)
  return {
    pcs_w: icc.selectHeader().PCSIlluminant,
    chromaticity: icc.selectDisplayChromaticity(),
    chad: icc.selectChromaticAdaption()
  }
}

async function simulate(file, p3) {
  const icc_xml_file = path.join(__dirname, '..', 'data', file),
    icc = await IccMaxDOM.fromXmlFile(icc_xml_file),
    ndin = decode_ndin(icc.selectPrivateTagData('ndin'), true),
    pcs_w = icc.selectHeader().PCSIlluminant,
    native_chromaticity = xyzChromaticity(ndin),
    display_chromaticity = icc.selectDisplayChromaticity()

  return
}

async function main() {
  const p3 = await display_p3()
  const results = await Promise.all(test_files.map((f) => simulate(f, p3)))
  console.log(results)
}

main()
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
  .then(() => {})
