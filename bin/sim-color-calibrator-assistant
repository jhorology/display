#!/usr/bin/env node

const fs = require('node:fs/promises'),
  path = require('node:path'),
  math = require('mathjs'),
  IccMaxDOM = require('../lib/iccmax-dom'),
  fp = require('../lib/fp'),
  { xy2, uv2, xyz2, uv2cct } = require('../lib/cct'),
  { decode_ndin } = require('../lib/icc-private-tags'),
  {
    xyzChromaticity,
    chromaticAdaptBradford,
    createChromaticAdaptionBradford,
    createLut,
    createMacDefaultLut
  } = require('../lib/display-icc'),
  DISPLAY_PCS_D50_WHITE = [0.964202880859, 1.0, 0.824905395508],
  CIE_D50_WHITE = [0.96422, 1, 0.82521],
  // round S15FixedNumber
  r = (v) => fp.fromS15F16Int32(fp.toS15F16Int32(v))

async function getChroma(file) {
  const icc_xml_file = path.join(__dirname, '..', 'data', file),
    icc = await IccMaxDOM.fromXmlFile(icc_xml_file),
    chroma = icc.selectDisplayChromaticity(),
    ndin = decode_ndin(icc.selectPrivateTagData('ndin')),
    native_chroma = r(xyzChromaticity(ndin, false)),
    pcs = icc.selectHeader().PCSIlluminant
  return { ndin, native_chroma, chroma, pcs }
}

/**
 * An attempt to understand what kind of calculations Display Calibrator Assistant is performing
 */
async function test(t) {
  const src = await getChroma(t.src),
    // generated by Coloro Calibrator Assistant.app
    target = await getChroma(t.target)
  console.log('\ntest', t, '------------------->')
  console.log('target rgb sum', math.add(target.chroma.r, target.chroma.g, target.chroma.b))
  console.log('target PCSIlluminant', target.pcs)
  console.log('source PCSIlluminant', src.pcs)

  // trying inverse operation
  // rgb values are exact match, so just need to know how the mediaWHitePoint was calculated.
  const sum_target_w = math.sum(target.chroma.w),
    corrected_native_xy_cordinates = {
      r: src.ndin.r,
      g: src.ndin.g,
      b: src.ndin.b,
      w: [target.chroma.w[0] / sum_target_w, target.chroma.w[1] / sum_target_w]
    },
    // xy cordicatess to xyz chroma
    corrected_native_chroma = xyzChromaticity(corrected_native_xy_cordinates, false),
    calculated_chroma = chromaticAdaptBradford(corrected_native_chroma, DISPLAY_PCS_D50_WHITE),
    printXYZ = (n, t, c) => {
      console.log(
        n,
        'target',
        t,
        'calc',
        c,
        'diff',
        math.subtract(fp.toS15F16Int32(c), fp.toS15F16Int32(t))
      )
    }

  printXYZ('mediaWhitePoint', target.chroma.w, corrected_native_chroma.w)
  printXYZ('red colorant', target.chroma.r, calculated_chroma.r)
  printXYZ('green colorant', target.chroma.g, calculated_chroma.g)
  printXYZ('blue colorant', target.chroma.b, calculated_chroma.b)
  //
  // Try convtering the white point keeping the UV deviation
  //
  console.log('native white', xy2(src.ndin.w))
  console.log('native CCT', uv2cct(xy2(src.ndin.w).uv))
  console.log('target white', xyz2(target.chroma.w))
  console.log('target CCT', uv2cct(xyz2(target.chroma.w).uv))
}

async function main() {
  const tests = [
      // hint = native white point color temp indicated by Color Calibrator Assistant
      { k: 5000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d50_macos_icc.xml', hint: 6509 },
      { k: 6000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d60_macos_icc.xml', hint: 6509 },
      { k: 6500, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d65_macos_icc.xml', hint: 6509 },
      { k: 7000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d70_macos_icc.xml', hint: 6509 },
      { k: 8000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d80_macos_icc.xml', hint: 6509 },
      { k: 9000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d90_macos_icc.xml', hint: 6509 },
      { k: 9300, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d93_macos_icc.xml', hint: 6509 }
      //      { k: 5000, src: 's3221qs_macos_icc.xml', target: 's3221qs_d50_macos_icc.xml', hint: 6479 }
      // { k: 6500, src: 's3221qs_macos_icc.xml', target: 's3221qs_d65_macos_icc.xml', hint: 6479 }
    ],
    results = await Promise.all(tests.map(async (t) => await test(t)))
  // console.log(JSON.stringify(results, null, 2))
}

main()
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
  .then(() => {})
