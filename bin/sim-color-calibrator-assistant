#!/usr/bin/env node

const fs = require('node:fs/promises'),
  path = require('node:path'),
  math = require('mathjs'),
  IccMaxDOM = require('../lib/iccmax-dom'),
  fp = require('../lib/fp'),
  { cct2xy_daylight, uv2cct, xyz2 } = require('../lib/cct'),
  { decode_ndin } = require('../lib/icc-private-tags'),
  { xyzChromaticity, chromaticAdaptBradford } = require('../lib/display-icc'),
  DISPLAY_PCS_D50_WHITE = [0.964202880859, 1.0, 0.824905395508]

async function getChroma(file) {
  const icc_xml_file = path.join(__dirname, '..', 'data', file),
    icc = await IccMaxDOM.fromXmlFile(icc_xml_file),
    chroma = icc.selectDisplayChromaticity(),
    ndin = decode_ndin(icc.selectPrivateTagData('ndin')),
    pcs = icc.selectHeader().PCSIlluminant
  return { ndin, chroma, pcs }
}

async function test(t) {
  const src = await getChroma(t.src),
    // generated by Coloro Calibrator Assistant.app
    target = await getChroma(t.target)

  const cct = t.k * (1.438776877 / 1.438),
    calculated_w = cct2xy_daylight(cct),
    corrected_native_xy_cordinates = {
      r: src.ndin.r,
      g: src.ndin.g,
      b: src.ndin.b,
      w: calculated_w.xy
    },
    corrected_native_chroma = xyzChromaticity(corrected_native_xy_cordinates, false),
    calculated_chroma = chromaticAdaptBradford(corrected_native_chroma, DISPLAY_PCS_D50_WHITE)
  // console.log(target, calculated_chroma)
  return {
    test: { ...t, cct },
    target: {
      w: xyz2(target.chroma.w),
      r: target.chroma.r,
      g: target.chroma.g,
      b: target.chroma.b,
      cct: uv2cct(xyz2(target.chroma.w).uv)
    },
    calculated: {
      w: calculated_w,
      r: calculated_chroma.r,
      g: calculated_chroma.g,
      b: calculated_chroma.b,
      cct: uv2cct(calculated_w.uv)
    },
    diff: {
      w: math.subtract(fp.toS15F16Int32(calculated_w.xyz), fp.toS15F16Int32(target.chroma.w)),
      r: math.subtract(fp.toS15F16Int32(calculated_chroma.r), fp.toS15F16Int32(target.chroma.r)),
      g: math.subtract(fp.toS15F16Int32(calculated_chroma.g), fp.toS15F16Int32(target.chroma.g)),
      b: math.subtract(fp.toS15F16Int32(calculated_chroma.b), fp.toS15F16Int32(target.chroma.b))
    }
  }
}

async function main() {
  const tests = [
    // hint = native white point color temp indicated by Color Calibrator Assistant
    { k: 5000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d50_macos_icc.xml' },
    { k: 6000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d60_macos_icc.xml' },
    { k: 6500, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d65_macos_icc.xml' },
    { k: 7000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d70_macos_icc.xml' },
    { k: 8000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d80_macos_icc.xml' },
    { k: 9000, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d90_macos_icc.xml' },
    { k: 9300, src: 'aw3225qf_macos_icc.xml', target: 'aw3225qf_d93_macos_icc.xml' },
    { k: 5000, src: 's3221qs_macos_icc.xml', target: 's3221qs_d50_macos_icc.xml' },
    { k: 6500, src: 's3221qs_macos_icc.xml', target: 's3221qs_d65_macos_icc.xml' }
  ]
  results = await Promise.all(tests.map(async (t) => await test(t)))
  console.log(JSON.stringify(results, null, 2))
}

main()
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
  .then(() => {})
